# -*- coding: utf-8 -*-
"""Weather_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVPoEvAFJfRzSZO3kTwXu97jLLXg6gCI

# The Weather Data set by Descision Tree and Random Forest 

In here you can see there is a weather data set and which was trained by Descision Tree and Random Forest. Here we have to decide what are X and y parameters before train the model. In this model output y variable is Sunny. End of the code we can compute the probability of sunny which may happen or not.




1.   Decision Tree



*   Considering given data trained by Decision tree and finally able to get a result, the accuracy of the weather data set. 

 accuracy 0.82


2.  Random Forest

*   And also considering given data we could get a result of accuracy of model by using Random Forest.

 accuracy 0.91

Therefore considering above two results we can determine what is the best way to train such kind of model.

Import libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""Data file import from GIT"""

!git clone 'https://github.com/sachinkavindaa/Machine-learning-with-Python'

"""Read CSV file"""

df = pd.read_csv('/content/Machine-learning-with-Python/ML/Weather/Weather.csv')
df

df.head()

"""Define the columns"""

df.columns

df.shape

"""Describe the each columns and finally able to get below graph"""

df.describe()

"""Whether check data set have non-null count"""

df.info()

"""YES! there is a no non- null count in the data set"""

df.isnull().any()

#round(100*(df.isnull().sum()/len(df.index)),2)

"""Drop the Time column"""

df.drop(['Date'],axis='columns',inplace=True)
df.head()

"""Define the weather column. Then we can there are eight changing variables in the Weather column"""

df['Weather'].value_counts()

"""Convert string to binary"""

dummies = pd.get_dummies(df.Weather)

merged = pd.concat([df,dummies],axis ='columns')
merged.head()

"""Drop the Weather column, we do not need it anymore"""

final = merged.drop(['Weather'],axis ='columns')
final.head()

"""Define X and y axis using the given data set. Here we considered Sunny as the y variable"""

X = final.drop(['Partly couldy','Sunny','Cloudy','Light rain shower','Patchy rain possible','Overcast','Thundery outbreaks possible','Moderate or heavy rain shower'], axis=1)
y = final['Sunny']

"""Split availabe dataset into training and test using"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40, random_state=101)

"""Import decision tree libary and define regressor as Descision tree regressor"""

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor()
regressor.fit(X_train, y_train)

"""Test accuracy of the trained data set corresponding to the Decision tree"""

regressor.score(X_test,y_test)

"""Prediction"""

y_pred = regressor.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,y_pred))
print('\n')
print(classification_report(y_test,y_pred))

df=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})
df

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

"""Import Random Forest libary"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=200)
model.fit(X_train, y_train)

"""Test accuracy of the data set using Random Forest"""

model.score(X_test,y_test)

prediction = model.predict(X_test)

print(confusion_matrix(y_test,prediction))
print('\n')
print(classification_report(y_test,prediction))

from tabulate import tabulate
probabilities = model.predict_proba(X_test)

print(tabulate(probabilities, headers='keys', tablefmt='psql'))

